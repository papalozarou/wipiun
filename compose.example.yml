# -----------------------------------------------------------------------------
# All variables are set in the matching `.env` file.
# -----------------------------------------------------------------------------
version: "3.7"

services:
# -----------------------------------------------------------------------------
# The `wireguard` container runs the VPN service and depends on `pihole` for 
# adblocking and `unbound` for DNS. It's `dns` values point to the `pihole` 
# and `unbound` containers.
# 
# There are several environment variables:
# * `PUID` – set to match the host user id.
# * `PGID` – set to match the host user's group id .
# * `TZ` – set to desired location, and should match any other containers.
# * `SERVER_PORT` – port to listen on, must match the later exposed port value.
# * `SERVER_URL` – the URL of the VPN server.
# * `PEERS` – the number of clients to generate files for, which can be a 
#   number or a list of names. Incremenmt, or add names, and rerun the 
#   container to add more.
# * `PEER_DNS` – this must point to the `pihole` container.
# * `INTERNAL_SUBNET` – the subnet the clients will connect to.
# * `ALLOWED_IPS` – The IPs/Ranges that the peers will be able to reach using 
#   the VPN connection. If not specified the default value is: 
#   '0.0.0.0/0, ::0/0' which will cause ALL traffic to route through the VPN.
#   To enable split tunnelling all private addresses have been set.
#
# `cap_add` values are necessary for the container to use the host network from
# the private network the services are connected to.
#
# An ipv4 address is specified to allow other services to interact with this
# container. This address must be within the subnet mask defined in 
# `vpnNetwork`, under the docker `networks`.
# -----------------------------------------------------------------------------
  wireguard:
    image: papalozarou/wireguard-alpine
    container_name: wireguard
    build:
      context: ./wireguard
      args:
        - UID=${C_UID}
        - GID=${C_GID}
        - USR=${C_USR}
        - GRP=${C_GRP}
    environment:
      - PUID=${H_UID}
      - PGID=${H_GID}
      - TZ=Europe/London
      - SERVER_PORT=00000
      # - SERVER_URL=yoursubdomain.yourdomain.com
      - CLIENTS=The,List,Of,Your,Devices
      - CLIENT_DNS=172.16.0.3
      - INTERNAL_SUBNET=172.17.0.0
      - ALLOWED_IPS=1.0.0.0/8, 2.0.0.0/8, 3.0.0.0/8, 4.0.0.0/6, 8.0.0.0/7, 11.0.0.0/8, 12.0.0.0/6, 16.0.0.0/4, 32.0.0.0/3, 64.0.0.0/2, 128.0.0.0/3, 160.0.0.0/5, 168.0.0.0/6, 172.0.0.0/12, 172.32.0.0/11, 172.64.0.0/10, 172.128.0.0/9, 173.0.0.0/8, 174.0.0.0/7, 176.0.0.0/4, 192.0.0.0/9, 192.128.0.0/11, 192.160.0.0/13, 192.169.0.0/16, 192.170.0.0/15, 192.172.0.0/14, 192.176.0.0/12, 192.192.0.0/10, 193.0.0.0/8, 194.0.0.0/7, 196.0.0.0/6, 200.0.0.0/5, 208.0.0.0/4, 10.5.0.3/32
    volumes:
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - "00000:51820/udp"
    dns:
      - 172.16.0.3
      - 172.16.0.4
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      vpnNetwork:
        ipv4_address: 172.16.0.2
    depends_on:
      - pihole
      - unbound
    restart: unless-stopped

# -----------------------------------------------------------------------------
# The `pihole` container blocks adverts, trackers and annoyances. It creates
# two volumes on the host that house it's data:
# 1. `etc-dnsmasq.d`
# 2. `etc-pihole`
#
# `ServerIP` points to pihole as does the loopback in `dns`. `DNS1` and the  
# second `dns` entry points to the unbound container.
#
# An ipv4 address is specified to allow other services to interact with this
# container. This address must be within the subnet mask defined in 
# `vpnNetwork`, under the docker `networks`.
# -----------------------------------------------------------------------------
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    environment:
      - TZ=Europe/London
      - ServerIP=172.16.0.3
      - DNS1=172.16.0.4
      - DNS2=no
    dns:
      - 127.0.0.1
      - 172.16.0.4
    expose:
      - 53/tcp
      - 53/udp
      - 80/tcp
      - 67/udp
    volumes:
      - "./pihole/etc-pihole:/etc/pihole"
      - "./pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
    networks:
      vpnNetwork:
        ipv4_address: 172.16.0.3
    depends_on:
      - unbound
    restart: unless-stopped

# -----------------------------------------------------------------------------
# The `unbound` container is a fully recursive local DNS server. Data is stored 
# in the `unbound_conf` volume.
#
# All requests are handled by `unbound` using a `root.hints` file. This file is
# periodically updated via a cronjob on the host.
#
# An ipv4 address is specified to allow other services to interact with this
# container. This address must be within the subnet mask defined in 
# `vpnNetwork`, under the docker `networks`.
# -----------------------------------------------------------------------------
  unbound:
    image: papalozarou/unbound-alpine
    container_name: unbound
    build:
      context: ./unbound
      args:
        - UID=${C_UID}
        - GID=${C_GID}
        - USR=${C_USR}
        - GRP=${C_GRP}
        - VERSION=${U_VERSION}
        - URL=${U_URL}
    expose:
      - 53/tcp
      - 53/udp
    volumes:
      - ./unbound/config:/etc/unbound
    networks:
      vpnNetwork:
        ipv4_address: 172.16.0.4
    restart: unless-stopped

# -----------------------------------------------------------------------------
# Two networks to separete concerns:
# 1. default – for `nginx` and `certbot`. 
# 2. vpnNetwork – for `wireguard`, `pihole` and `unbound`
#
# The subnet mask is written in CIDR notation and addresses used for services
# must be part of this range.
# -----------------------------------------------------------------------------
networks:
  default:
  vpnNetwork:
    ipam:
      config:
        - subnet: 172.16.0.0/28